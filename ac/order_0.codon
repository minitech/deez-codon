# Based on ArithmeticOrder0Stream.h from DeeZ by Hach, Numanagić, and Şahinalp (./deez/LICENSE)

from copy import copy

from .internals import widen_16_32, truncate_32_16
from .arithmetic_coder import Range, Decoder, encode


REARRANGE_EVERY = 32u16
SUM_LIMIT = 1u16 << 15u16


def _prefix_sum[T](values: list[T], count: int) -> T:
    s = T(0)

    for i in range(count):
        s += values[i]

    return s


class Stats:
    _symbols: list[u8]
    _frequencies: list[u16]
    sum: u16

    def __init__(self, size: int) -> None:
        if not (1 <= size <= 256):
            raise ValueError("Invalid alphabet size")
        self._symbols = [u8(i) for i in range(size)]
        self._frequencies = [1u16] * size
        self.sum = u16(size)

    def __copy__(self) -> Stats:
        c = Stats(len(self._symbols))
        c._symbols[:] = self._symbols
        c._frequencies[:] = self._frequencies
        c.sum = self.sum
        return c

    def get_symbol_range(self, symbol: u8) -> Range:
        i = self._symbols.index(symbol)
        start = _prefix_sum(self._frequencies, i)

        return Range(
            start=widen_16_32(start),
            size=widen_16_32(self._frequencies[i]),
            total=widen_16_32(self.sum),
        )

    def get_position_range(self, position: u16) -> tuple[u8, Range]:
        start = 0u16
        for i, frequency in enumerate(self._frequencies):
            if position < start + frequency:
                range_ = Range(
                    start=widen_16_32(start),
                    size=widen_16_32(frequency),
                    total=widen_16_32(self.sum),
                )
                return (self._symbols[i], range_)
            start += frequency

        raise ValueError("Position out of range")

    def add(self, symbol: u8) -> None:
        i = self._symbols.index(symbol)
        self._frequencies[i] += 1u16
        self.sum += 1u16

        if i > 0 and self.sum % REARRANGE_EVERY == 0u16:
            # make the input closer to sorted so linear scans are faster
            j = i - 1
            while j > 0 and self._frequencies[i] > self._frequencies[j]: j -= 1
            self._symbols[i], self._symbols[j + 1] = self._symbols[j + 1], self._symbols[i]
            self._frequencies[i], self._frequencies[j + 1] = self._frequencies[j + 1], self._frequencies[i]

        if self.sum > SUM_LIMIT:
            self.rescale()

    def rescale(self) -> None:
        self.sum = 0u16

        for i in range(len(self._frequencies)):
            # halve rounding up; important for, at least, making sure no probability goes to zero
            self._frequencies[i] -= self._frequencies[i] >> 1u16
            self.sum += self._frequencies[i]

            j = i - 1
            while j > 0 and self._frequencies[i] > self._frequencies[j]: j -= 1
            self._symbols[i], self._symbols[j + 1] = self._symbols[j + 1], self._symbols[i]
            self._frequencies[i], self._frequencies[j + 1] = self._frequencies[j + 1], self._frequencies[i]


def compress(data: list[u8], initial_stats: Stats) -> Generator[u32]:
    def ranges() -> Generator[Range]:
        stats = copy(initial_stats)

        for b in data:
            yield stats.get_symbol_range(b)
            stats.add(b)

    if len(data) > 0xffff_ffff:
        raise ValueError("Data too long to compress")

    yield u32(len(data))
    yield from encode(ranges())


def decompress(compressed: Generator[u32], initial_stats: Stats) -> Generator[u8]:
    stats = copy(initial_stats)
    data_len = next(compressed)
    decoder = Decoder(compressed)

    for _ in range(int(data_len)):
        b_pos = decoder.peek(widen_16_32(stats.sum))
        assert b_pos <= 0xffffu32
        b, range_ = stats.get_position_range(truncate_32_16(b_pos))
        decoder.shift(range_)
        stats.add(b)
        yield b
